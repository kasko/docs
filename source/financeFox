
#FinanceFOX Integration Guide

--------

Auth Keys:
> TEST SECRET API KEY : sk_test_fwx8LqzefGjykDmrDMhoUP8LR75nnVwB
>
> TEST PUBLIC JS KEY  : pk_test_bZjJePE137LQ6BkRwl8KGX0x2zDwVlWM


Product Keys:

> ERV - Reise : LPE5mgGpndOQZoX7eMze0w8aK7Br3N14
>
> Xtra-Fahrer-Schutz : d7zoBRlEp9yar6XyWMPWm05VqwkQKA8Y


----------


Welcome to the KASKO documentation.

Here you will find descriptions of using the KASKO JS to include the widget and developer docs for using the REST API.

For the full API spec including all KASKO products please visit https://developers.kasko.io


During API development it can be helpful to have access to the KASKO dashboard to confirm policy is created as expected.   If you wish to be granted access please send us an messsage with the email address you want access granted for.

> If you have any questions please email us at techsupport@kasko.io

##Integration Methods

KASKO supports 2 integration methods by default.

###KASKO JS

This integration method is used to load the KASKO Widget onto your site.
The KASKO widget is an end to end solution that will load onto your site
and allow the full insurance transaction to take place with minimal development work.


###REST API

The REST API integration method is used for deep integrations
(i.e. within you existing booking flow).

We are always happy to hear from our users, so if you have any feedback
or suggestions please email our technical support desk.

##Keys


###Client Keys


KASKO will provide you with two Client keys: **TEST** and **LIVE**.

**TEST** key is for development purposes using test credit card
credentials without real charges being made or insurance policies being
created.

**LIVE** key is to create real policies. Credit card information will be
processed, charges will be made and real insurance policies will be
created.

###Secret Keys

KASKO will provide you with two Secret keys to be used with the KASKO REST API.

**TEST** key is for development purposes without real insurance policies being created.

**LIVE** key is to create real policies. Once the distributor confirms that payment has been received real insurance policies will be
created.

    Secret keys must be stored securely as they allowing issuing of policies for which payment will be owed by the distributor


### Product Keys

KASKO will provide you with distinct product keys for each insurance
product that you have access to.

This key must be provided to the KASKO JS and REST API respectively.


----------


##KASKO JS


KASKO JS is used to load and configure the KASKO widget onto your site.
KASKO JS automatically handles sizing of the widget so that it works
responsively in your page.


###Integration KASKO JS

    <script type="text/javascript" src="https://js.kasko.io"></script>

Include the following JS snippet in the HEAD of the page or at above
where you want the widget to be created.

###Widget Containter

    <div id="kasko-widget-container"></div>

Add a container div where you want the widget to be created on the page.

This can be given any ID but we have used kasko-widget-container in our
example below. This container can be set with any width, but should be
left “height:auto” so that KASKO JS can handle the height responsively.

###Setup KASKO JS

**ERV Reise**

     <script>
          KASKO.Setup({
            container: "kasko-widget-container",
            key: "pk_test_bZjJePE137LQ6BkRwl8KGX0x2zDwVlWM",
            product : "LPE5mgGpndOQZoX7eMze0w8aK7Br3N14",
            overlay_color : "#FFFFFF",
            data:{
            }
          });
        </script>

**Xtra-Fahrer-Schutz**

     <script>
          KASKO.Setup({
            container: "kasko-widget-container",
            key: "pk_test_bZjJePE137LQ6BkRwl8KGX0x2zDwVlWM",
            product : "LPE5mgGpndOQZoX7eMze0w8aK7Br3N14",
            overlay_color : "#FFFFFF",
            data:{
            }
          });
        </script>

Below the widget container div include the widget setup javascript

###Parameters


Widget setup parameters

| Parameter        | required   | Type          | Description  |
| ------------- | ------------- |
| container        | yes        | string        | ID of the div you want the KASKO Widget to appear in.   |
| key              | yes        | string        | TEST or LIVE client key provided by KASKO.              |
| product          | yes        | string        | Product key provided by KASKO.                          |
| overlay\_color   | no         | string        | HEX Color code of the loading overlay.                  |
| data             | no         | data object   | Data                                                    |

### Optional data parameters


These fields can be provided to the data object.

These fields can prepopulate widget data or be used to pass extra information




| Parameter | Type  | Description  |
| ------------- | ------------- |
| firstname        | string        | Firstname of the customer - This will prepopulate in the widget|
| lastname         | string        | Lastname of the customer - This will prepopulate in the widget  |
| email            | string        | Email Address of the customer - This will prepopulate in the widget  |


### Testing

Once the Widget is working in TEST mode, you can buy a policy with the
following CC details

| Field                | Detail                   |
| ------------- | ------------- |
| Credit Card Number   | 4111 1111 1111 1111      |
| CVC                  | 123                      |
| Exp                  | 12/19                    |
| Name                 | Any name above 4 chars   |

Please contact techsupport@kasko.io with the URL of your page for us to
check the integration

### Go Live


When testing is complete and you're ready to Go Live, please swap the
Client TEST key for the Client LIVE key in your production site.

> You must swap you client key with the LIVE client key before going
> live.


----------


##REST API


The KASKO REST API is primarily used for getting quotes and purchasing policies.


##Getting started


The basic steps to creating a policy are as follows.

1) Set Authorization headers for all requests

2) Get a Quote

3) Create a Policy

4) Convert a policy status to paid

5) Testing and Go-Live

```
While developing/testing please ensure that you use the TEST key.
```

Once the implementation has been completed and tested, and a go-live date has been approved by the business, you can change you key to the LIVE key.


###Authorization Header


The request header must with your TEST or LIVE secret :ref:`keys` on every request you make to the API.

```
Authorization: Bearer secret_key
```

###Get a Quote

Get a quote from the KASKO platform

####Definition

```
GET https://api.kasko.io/quotes
```
####Parameters


| Parameter        | required   | Type          | Description                                                    |
|-----|----|
| variant_id       | yes        | string        |  Variant key provided by KASKO.                                |
| data             | yes        | JSON          |  Refer to the :ref:`products` section for required data        |

> Please URL Encode data

####Example Request

	curl 	--get 'https://api.kasko.io/quotes' \
		--data 'variant_id=VARIANT_ID' \
		--data-urlencode 'data=DATA' \
		-H 'Authorization: Bearer sk_test_SECRET_KEY'

####Example Response

	{
		"gross_premium": 699,
		"currency": "eur",
		"net_premium": 587,
		"net_service_fee_total": 0,
		"premium_tax": 112,
		"service_charge_vat": 0,
		"signature": "2zDDsM+hPro2cDOhEqj7RuwJzcxcwC\/YgG2Wim13AFLaQXqhAL7hPDFTm5qhGV9wWm9dwinvcd44DnB22v6D1oYQmvM18MrKZtQZzoGb1Qtn8cH90ZIaKeywrxyNopZFOgw61PBbF74qo4Z1E4LKrbjEVl8fD9OJXcukDnC2\/r7Yi7KkEIGhKkBUyjn4LMlupi6rfpMUjRtx73f5WWin8lGJTGRIdcJGZKArE53wVZZKIRt230ee6ZXUOkGlPkKD7iJ15qOTCmKeoeaYY8+h59WT2Vmm6HSlljTuu11\/a1nwLz9rjmYIN9GOewQKuWXW0gL1xUuJh0cmGd8rMBjZ74FlhS59YxkSUzJJ4bsfE6cmcRXylBdb6iMG5WDryN4hpaTs8gqx9O8iphCTfpRox0l1LNYjJWdX7gaFHYkW7ZeI8HsFQs\/Dc4QYTfOTud6Xzu5k25Ae51z\/AOyNZBk0T3RSByYnKFzv\/czm19UzbdPU="
	}

###Create an unpaid policy
Create an unpaid policy on the Kasko platform.

Why do we do this 2 step mechanism?   We want to ensure that there is no problem with the quote or details before you charge your customers for the policy.  After this point we can ensure that the policy can be purchased.

####Definition

	POST https://api.kasko.io/policies


####Parameters
| Parameter        | required   | Type          | Description                                             |
|---|---|
| quote_token      | yes        | string        |  Quote token provided in quote object                   |
| first_name       | yes        | string        |  First Name of the customer                             |
| last_name        | yes        | string        |  Last Name of the customer                              |
| email            | yes        | string        |  Email address of the customer                          |
| data             | maybe      | JSON          |  Refer to the product section here for required data    |

####Example Request
	curl 'https://api.kasko.io/policies' \
   		-H 'Authorization: Bearer sk_test_SECRET_KEY' \
   		-d quote_token='QUOTE_TOKEN' \
   		-d 'first_name=FIRSTNAME' \
   		-d 'last_name=SURNAME' \
   		-d 'email=EMAIL_ADDRESS' \
   		-d 'data=DATA'



####Example Response

	{
	  "id": "tmGgyzWx47B5qY6wXMLPNREA9dDnOQVZ3",
	  "payment_token": "2pwqBTy+79gK/dKuJmRjC1yTk7jx5zvuh5tn34139GiOd8irZuuTB6ViTKyRMNW8VcctGzDAn+QQf9fHOjdowpE67GHEFFuy4X+QFfx87qlg=",
	  "_links": {
	    "_self": {
	      "href": "https://dev-api.kasko.io/policies/tmGgyzWx47B5qY6wXMLPNREA9dDnOQVZ3"
	    }
	  }
	}


###Convert unpaid policy to paid policy

Convert an already created policy to a paid policy.

This API request should be made after payment has been taken for the policy by the distirbutor.   This will trigger the KASKO platform to email the customer the Policy Documents.

####Definition

	POST https://api.kasko.io/payments

####Parameters

| Parameter        | required   | Type          | Description                                             |
|---|---|
| payment_token    | yes        | string        |  Payment token from /policy endpoint                    |
| policy_id        | yes        | string        |  Policy ID from /policy endpoint                        |

####Example Request

	curl 'https://api.kasko.io/payments' \
   	-H 'Authorization: Bearer sk_test_SECRET_KEY' \
   	-d "token=PAYMENT_TOKEN" \
   	-d "policy_id=POLICY_ID"


###Testing
----------

Please contact techsupport@kasko.io with the URL of your page for us to check the integration

###Go Live
----------

When testing is complete and you're ready to Go Live, please swap the
Client TEST key for the Client LIVE key in your production site.

> You must swap you client key with the live client key before going
> live.

